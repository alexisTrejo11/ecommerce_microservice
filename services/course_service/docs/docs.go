// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/lessons": {
            "post": {
                "description": "Create a new lesson with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Lessons"
                ],
                "summary": "Create a new Lesson",
                "parameters": [
                    {
                        "description": "Lesson to create",
                        "name": "lesson",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.LessonInsertDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Lesson successfully created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dtos.LessonDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ApiResponse"
                        }
                    }
                }
            }
        },
        "/modules": {
            "post": {
                "description": "Create a new module with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Modules"
                ],
                "summary": "Create Module",
                "parameters": [
                    {
                        "description": "Module data",
                        "name": "module",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.ModuleInsertDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Module successfully created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dtos.ModuleDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ApiResponse"
                        }
                    }
                }
            }
        },
        "/resources": {
            "post": {
                "description": "Create a new resource for a lesson with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Resources"
                ],
                "summary": "Create a new Resource",
                "parameters": [
                    {
                        "description": "Resource to create",
                        "name": "resource",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.ResourceInsertDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Resource successfully created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dtos.ResourceDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ApiResponse"
                        }
                    }
                }
            }
        },
        "/v1/api/courses": {
            "post": {
                "description": "Create a course with the provided information.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Courses"
                ],
                "summary": "Create a new Course",
                "parameters": [
                    {
                        "description": "Course information",
                        "name": "course",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.CourseInsertDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Course successfully created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dtos.CourseDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ApiResponse"
                        }
                    }
                }
            }
        },
        "/v1/api/courses/{id}": {
            "get": {
                "description": "Retrieve a course by its unique ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Courses"
                ],
                "summary": "Get Course by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Course ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Course successfully retrieved",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dtos.CourseDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Course not found",
                        "schema": {
                            "$ref": "#/definitions/response.ApiResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update course details using its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Courses"
                ],
                "summary": "Update an existing Course",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Course ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Course information to update",
                        "name": "course",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.CourseInsertDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Course successfully updated",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dtos.CourseDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ApiResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an existing course by its unique ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Courses"
                ],
                "summary": "Delete a Course",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Course ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Course successfully deleted",
                        "schema": {
                            "$ref": "#/definitions/response.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Course not found",
                        "schema": {
                            "$ref": "#/definitions/response.ApiResponse"
                        }
                    }
                }
            }
        },
        "/v1/api/lesson/{lesson_id}": {
            "get": {
                "description": "Retrieve resources associated with a specific lesson.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Resources"
                ],
                "summary": "Get Resources by Lesson ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Lesson ID",
                        "name": "lesson_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Resources successfully retrieved",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/dtos.ResourceDTO"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Resources not found",
                        "schema": {
                            "$ref": "#/definitions/response.ApiResponse"
                        }
                    }
                }
            }
        },
        "/v1/api/lessons/{id}": {
            "get": {
                "description": "Retrieve a lesson by its unique ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Lessons"
                ],
                "summary": "Get Lesson by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Lesson ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Lesson successfully retrieved",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dtos.LessonDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Lesson not found",
                        "schema": {
                            "$ref": "#/definitions/response.ApiResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update the details of an existing lesson identified by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Lessons"
                ],
                "summary": "Update an existing Lesson",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Lesson ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Lesson data to update",
                        "name": "lesson",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.LessonInsertDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Lesson successfully updated",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dtos.LessonDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ApiResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an existing lesson identified by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Lessons"
                ],
                "summary": "Delete a Lesson",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Lesson ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Lesson successfully deleted",
                        "schema": {
                            "$ref": "#/definitions/response.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Lesson not found",
                        "schema": {
                            "$ref": "#/definitions/response.ApiResponse"
                        }
                    }
                }
            }
        },
        "/v1/api/modules/course/{course_id}": {
            "get": {
                "description": "Retrieve modules associated with a given course ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Modules"
                ],
                "summary": "Get Modules by Course ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Course ID",
                        "name": "course_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Modules successfully retrieved",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/dtos.ModuleDTO"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Modules not found",
                        "schema": {
                            "$ref": "#/definitions/response.ApiResponse"
                        }
                    }
                }
            }
        },
        "/v1/api/modules/{id}": {
            "get": {
                "description": "Retrieve a module by its unique ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Modules"
                ],
                "summary": "Get Module by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Module ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Module successfully retrieved",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dtos.ModuleDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Module not found",
                        "schema": {
                            "$ref": "#/definitions/response.ApiResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing module by its ID with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Modules"
                ],
                "summary": "Update Module",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Module ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Module data to update",
                        "name": "module",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.ModuleInsertDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Module successfully updated",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dtos.ModuleDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ApiResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an existing module by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Modules"
                ],
                "summary": "Delete Module",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Module ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Module successfully deleted",
                        "schema": {
                            "$ref": "#/definitions/response.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Module not found",
                        "schema": {
                            "$ref": "#/definitions/response.ApiResponse"
                        }
                    }
                }
            }
        },
        "/v1/api/resources/{id}": {
            "get": {
                "description": "Retrieve a resource by its unique ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Resources"
                ],
                "summary": "Get Resource by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Resource ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Resource successfully retrieved",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dtos.ResourceDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/response.ApiResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update the details of an existing resource identified by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Resources"
                ],
                "summary": "Update an existing Resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Resource ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Resource data to update",
                        "name": "resource",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.ResourceInsertDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Resource successfully updated",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.ApiResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dtos.ResourceDTO"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ApiResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an existing resource identified by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Resources"
                ],
                "summary": "Delete a Resource",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Resource ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Resource successfully deleted",
                        "schema": {
                            "$ref": "#/definitions/response.ApiResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.ApiResponse"
                        }
                    },
                    "404": {
                        "description": "Resource not found",
                        "schema": {
                            "$ref": "#/definitions/response.ApiResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dtos.CourseDTO": {
            "description": "DTO that contains all the details of a course, including its modules, instructor, price, and more.",
            "type": "object",
            "properties": {
                "category": {
                    "description": "Category specifies the course's category.\n@example PROGRAMMING",
                    "type": "string"
                },
                "created_at": {
                    "description": "CreatedAt is the timestamp when the course was created.\n@example 2025-03-12T10:00:00Z",
                    "type": "string"
                },
                "description": {
                    "description": "Description is a detailed explanation of the course.\n@example Learn Go programming from scratch.",
                    "type": "string"
                },
                "enrollment_count": {
                    "description": "EnrollmentCount is the number of students enrolled in the course.\n@example 100",
                    "type": "integer"
                },
                "id": {
                    "description": "ID is the unique identifier for the course.\n@example abc123",
                    "type": "string"
                },
                "instructor_id": {
                    "description": "InstructorID is the unique identifier of the course instructor.\n@example 8c1d73a3-4a33-4c60-914f-76b91b3510ad",
                    "type": "string"
                },
                "is_free": {
                    "description": "IsFree indicates whether the course is free or paid.\n@example false",
                    "type": "boolean"
                },
                "is_published": {
                    "description": "IsPublished indicates whether the course is published or not.\n@example true",
                    "type": "boolean"
                },
                "language": {
                    "description": "Language is the language in which the course is taught.\n@example English",
                    "type": "string"
                },
                "level": {
                    "description": "Level indicates the difficulty level of the course.\n@example BEGINNER",
                    "type": "string"
                },
                "modules": {
                    "description": "Modules are the modules associated with the course.\n@example [...]",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dtos.ModuleDTO"
                    }
                },
                "price": {
                    "description": "Price is the cost of the course.\n@example 50.0",
                    "type": "number"
                },
                "published_at": {
                    "description": "PublishedAt is the timestamp when the course was published.\n@example 2025-03-12T10:00:00Z",
                    "type": "string"
                },
                "rating": {
                    "description": "Rating is the average rating of the course.\n@example 4.5",
                    "type": "number"
                },
                "review_count": {
                    "description": "ReviewCount is the number of reviews the course has received.\n@example 25",
                    "type": "integer"
                },
                "slug": {
                    "description": "Slug is a URL-friendly version of the title.\n@example go-programming",
                    "type": "string"
                },
                "tags": {
                    "description": "Tags are a list of relevant keywords related to the course.\n@example [\"Go\", \"Programming\"]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "thumbnail_url": {
                    "description": "ThumbnailURL is the URL to the course's thumbnail image.\n@example https://example.com/thumbnail.jpg",
                    "type": "string"
                },
                "title": {
                    "description": "Title is the name of the course.\n@example Go Programming",
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt is the timestamp when the course was last updated.\n@example 2025-03-12T10:00:00Z",
                    "type": "string"
                }
            }
        },
        "dtos.CourseInsertDTO": {
            "description": "DTO used to insert a new course with necessary fields including title, description, level, and more.",
            "type": "object",
            "required": [
                "category",
                "description",
                "instructor_id",
                "language",
                "level",
                "title"
            ],
            "properties": {
                "category": {
                    "description": "Category specifies the course's category.\n@example PROGRAMMING",
                    "type": "string",
                    "enum": [
                        "PROGRAMMING",
                        "DESIGN_SOFTWARE",
                        "ENGINEER_SOFTWARE",
                        "ARCHITECTURE_SOFTWARE",
                        "AI",
                        "ART",
                        "MARKETING",
                        "SOCIAL_NETWORK",
                        "LANGUAGE"
                    ]
                },
                "description": {
                    "description": "Description is a detailed explanation of the course.\n@example Learn Go programming from scratch.",
                    "type": "string"
                },
                "instructor_id": {
                    "description": "InstructorID is the unique identifier of the course instructor.\n@example 8c1d73a3-4a33-4c60-914f-76b91b3510ad",
                    "type": "string"
                },
                "is_free": {
                    "description": "IsFree indicates whether the course is free or paid.\n@example false",
                    "type": "boolean"
                },
                "language": {
                    "description": "Language is the language in which the course is taught.\n@example English",
                    "type": "string"
                },
                "level": {
                    "description": "Level indicates the difficulty level of the course.\n@example BEGINNER",
                    "type": "string",
                    "enum": [
                        "BEGINNER",
                        "INTERMEDIATE",
                        "ADVANCED"
                    ]
                },
                "price": {
                    "description": "Price is the cost of the course.\n@example 50.0",
                    "type": "number",
                    "minimum": 0
                },
                "tags": {
                    "description": "Tags are a list of relevant keywords related to the course.\n@example [\"Go\", \"Programming\"]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "thumbnail_url": {
                    "description": "ThumbnailURL is the URL to the course's thumbnail image.\n@example https://example.com/thumbnail.jpg",
                    "type": "string"
                },
                "title": {
                    "description": "Title is the name of the course.\n@example Go Programming",
                    "type": "string",
                    "minLength": 3
                }
            }
        },
        "dtos.LessonDTO": {
            "description": "DTO that contains the full details of a lesson within a module, including resources and metadata.",
            "type": "object",
            "properties": {
                "content": {
                    "description": "Content is the textual content of the lesson.\n@example This is a lesson on Go",
                    "type": "string"
                },
                "created_at": {
                    "description": "CreatedAt is the timestamp when the lesson was created.\n@example 2025-03-12T10:00:00Z",
                    "type": "string"
                },
                "duration": {
                    "description": "Duration is the duration of the lesson in minutes.\n@example 120",
                    "type": "integer"
                },
                "id": {
                    "description": "ID is the unique identifier for the lesson.\n@example f2b02b99-4789-4c30-a9b9-b574fbcbd7cd",
                    "type": "string"
                },
                "is_preview": {
                    "description": "IsPreview indicates whether the lesson is available as a preview.\n@example true",
                    "type": "boolean"
                },
                "order": {
                    "description": "Order is the sequence number of the lesson within the module.\n@example 1",
                    "type": "integer"
                },
                "title": {
                    "description": "Title is the title of the lesson.\n@example Lesson 1",
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt is the timestamp when the lesson was last updated.\n@example 2025-03-12T10:00:00Z",
                    "type": "string"
                },
                "video_url": {
                    "description": "VideoURL is the URL for the lesson's video.\n@example https://example.com/video",
                    "type": "string"
                }
            }
        },
        "dtos.LessonInsertDTO": {
            "description": "DTO used to insert a new lesson, including resources and other required fields.",
            "type": "object",
            "required": [
                "duration",
                "module_id",
                "title"
            ],
            "properties": {
                "content": {
                    "description": "Content is the textual content of the lesson.\n@example This is a lesson on Go",
                    "type": "string"
                },
                "duration": {
                    "description": "Duration is the duration of the lesson in minutes.\n@example 120",
                    "type": "integer",
                    "minimum": 1
                },
                "is_preview": {
                    "description": "IsPreview indicates whether the lesson is available as a preview.\n@example true",
                    "type": "boolean"
                },
                "module_id": {
                    "description": "ModuleId is the unique identifier for the module the lesson belongs to.\n@example 1c1cdb5c-d6e4-4fb0-9755-f30b9d4fbb8c",
                    "type": "string"
                },
                "order": {
                    "description": "Order is the sequence number of the lesson within the module.\n@example 1",
                    "type": "integer",
                    "minimum": 0
                },
                "resources": {
                    "description": "Resources is a list of resources associated with the lesson.\n@example [{\"title\": \"Resource 1\", \"lesson_id\": \"f2b02b99-4789-4c30-a9b9-b574fbcbd7cd\", \"type\": \"PDF\", \"url\": \"https://example.com/resource\"}]",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dtos.ResourceInsertDTO"
                    }
                },
                "title": {
                    "description": "Title is the title of the lesson.\n@example Lesson 1",
                    "type": "string"
                },
                "video_url": {
                    "description": "VideoURL is the URL for the lesson's video.\n@example https://example.com/video",
                    "type": "string"
                }
            }
        },
        "dtos.ModuleDTO": {
            "description": "DTO that contains details of a module within a course, including its lessons.",
            "type": "object",
            "properties": {
                "course_id": {
                    "description": "CourseID is the unique identifier for the course associated with the module.\n@example 1c1cdb5c-d6e4-4fb0-9755-f30b9d4fbb8c",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the unique identifier for the module.\n@example a6bfc1f9-0f39-4c6f-b3bc-e9d0c44f3c8a",
                    "type": "string"
                },
                "lessons": {
                    "description": "Lessons is a list of lessons associated with the module.\n@example [{\"id\": \"f2b02b99-4789-4c30-a9b9-b574fbcbd7cd\", \"title\": \"Lesson 1\", \"content\": \"Introduction to Go\"}]",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dtos.LessonDTO"
                    }
                },
                "order": {
                    "description": "Order is the sequence number of the module in the course.\n@example 1",
                    "type": "integer"
                },
                "title": {
                    "description": "Title is the name or title of the module.\n@example Module 1",
                    "type": "string"
                }
            }
        },
        "dtos.ModuleInsertDTO": {
            "description": "DTO used to insert a new module with the required fields, including lessons.",
            "type": "object",
            "required": [
                "course_id",
                "title"
            ],
            "properties": {
                "course_id": {
                    "description": "CourseID is the unique identifier for the course associated with the module.\n@example 1c1cdb5c-d6e4-4fb0-9755-f30b9d4fbb8c",
                    "type": "string"
                },
                "lessons": {
                    "description": "Lessons is a list of lessons associated with the module.\n@example [{\"title\": \"Lesson 1\", \"content\": \"Introduction to Go\"}]",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dtos.LessonInsertDTO"
                    }
                },
                "order": {
                    "description": "Order is the sequence number of the module in the course.\n@example 1",
                    "type": "integer",
                    "minimum": 0
                },
                "title": {
                    "description": "Title is the name or title of the module.\n@example Module 1",
                    "type": "string"
                }
            }
        },
        "dtos.ResourceDTO": {
            "description": "DTO that contains information about a specific resource.",
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt is the timestamp when the resource was created.\n@example 2025-03-01T12:34:56Z",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the unique identifier for the resource.\n@example d4fc16ff-4b2a-4a47-9cd6-8579d1f2cf0c",
                    "type": "string"
                },
                "lesson_id": {
                    "description": "LessonID is the unique identifier for the lesson associated with the resource.\n@example b7a92b1d-6a84-43f9-bfa0-c3703d13bc3f",
                    "type": "string"
                },
                "title": {
                    "description": "Title is the name or title of the resource.\n@example Introduction to Go",
                    "type": "string"
                },
                "type": {
                    "description": "Type refers to the type of resource (e.g., PDF, SLIDES, LINK, CODE, OTHER).\n@example PDF",
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt is the timestamp when the resource was last updated.\n@example 2025-03-01T12:34:56Z",
                    "type": "string"
                },
                "url": {
                    "description": "URL is the link or address where the resource can be accessed.\n@example https://example.com/intro-to-go.pdf",
                    "type": "string"
                }
            }
        },
        "dtos.ResourceInsertDTO": {
            "description": "DTO used to insert a new resource with the required fields.",
            "type": "object",
            "required": [
                "lesson_id",
                "title",
                "type",
                "url"
            ],
            "properties": {
                "lesson_id": {
                    "description": "LessonID is the unique identifier for the lesson associated with the resource.\n@example b7a92b1d-6a84-43f9-bfa0-c3703d13bc3f",
                    "type": "string"
                },
                "title": {
                    "description": "Title is the name or title of the resource.\n@example Introduction to Go",
                    "type": "string"
                },
                "type": {
                    "description": "Type refers to the type of resource (e.g., PDF, SLIDES, LINK, CODE, OTHER).\n@example PDF",
                    "type": "string",
                    "enum": [
                        "PDF",
                        "SLIDES",
                        "LINK",
                        "CODE",
                        "OTHER"
                    ]
                },
                "url": {
                    "description": "URL is the link or address where the resource can be accessed.\n@example https://example.com/intro-to-go.pdf",
                    "type": "string"
                }
            }
        },
        "response.ApiResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "correlationId": {
                    "type": "string"
                },
                "data": {},
                "errors": {},
                "message": {},
                "page": {
                    "type": "integer"
                },
                "perPage": {
                    "type": "integer"
                },
                "success": {
                    "type": "boolean"
                },
                "timestamp": {
                    "type": "string"
                },
                "totalCount": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
